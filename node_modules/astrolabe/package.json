{
  "name": "astrolabe",
  "version": "0.3.3-alpha",
  "description": "Page objects for protractor",
  "keywords": [
    "angular",
    "angularjs",
    "protractor",
    "karma",
    "e2e",
    "test",
    "testing",
    "webdriver",
    "webdriverjs",
    "selenium"
  ],
  "author": {
    "name": "stuplum",
    "email": "stuplum@gmail.com"
  },
  "licenses": [
    {
      "type": "BSD 3-Clause",
      "url": "http://opensource.org/licenses/BSD-3-Clause"
    }
  ],
  "main": "lib/astrolabe.js",
  "directories": {
    "lib": "./lib",
    "test": "./test"
  },
  "scripts": {
    "test": "mocha test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/stuplum/astrolabe.git"
  },
  "bugs": {
    "url": "http://github.com/stuplum/astrolabe/issues"
  },
  "dependencies": {
    "underscore": "*",
    "protractor": "*",
    "exceptions": "~0.1.1"
  },
  "devDependencies": {
    "mocha": "*",
    "chai": "*",
    "sinon": "~1.7.3",
    "sinon-chai": "~2.4.0",
    "sandboxed-module": "0.2.1"
  },
  "readme": "Astrolabe [![Build Status](https://travis-ci.org/stuplum/astrolabe.png?branch=master)](https://travis-ci.org/stuplum/astrolabe)\n=========\n\n`Astrolabe` is an extension for [protractor](https://github.com/juliemr/protractor) that adds page objects to your functional/e2e tests.\n\nInstallation\n------------\n\nvia [npm (node package manager)](http://github.com/isaacs/npm)\n\n    $ npm install astrolabe\n\n\nUsage\n-----\n\nExample signInPage.js\n\n``` js\nvar Page = require('astrolabe').Page;\n\nmodule.exports = Page.create({\n\n    url: { value: 'http://mysite.com/signin' },\n\n    username: { get: function() { return this.findElement(this.by.input('username')); } }, // finds an input element with the name 'username'\n    submit:   { get: function() { return this.findElement(this.by.id('submit')); } }       // finds an element with the id 'submit'\n});\n```\n\nadding to tests:\n\n``` js\nvar signInPage = require('./path/to/signInPage');\n\n...\n```\n\nnavigating:\n\n``` js\nsignInPage.go(); // will send browser to 'http://mysite.com/signin'\n\nsignInPage.go('some', 'path'); // will send browser to 'http://mysite.com/signin/some/path'\nsignInPage.go('some/path');    // will send browser to 'http://mysite.com/signin/some/path'\n\nsignInPage.go({ some: 'query' }); // will send browser to 'http://mysite.com/signin?some=query'\n```\n\ninteracting: (See [Protractor API Docs](https://github.com/angular/protractor/blob/master/docs/api.md) for more info on available api methods)\n\n``` js\nsignInPage.username.sendKeys('a username'); // will fill the username input with the text 'a username'\n\nsignInPage.submit.click(); // will click on the submit element\n```\n\n``` js\nsignInPage.username.getAttribute('value'); // will return a promise that is resolved with the value of the text field, in this case 'a username'\n\n// this can be used within an expectation\nexpect(signInPage.username.getAttribute('value')).toBe('a username');\n```\n\nIt is possible to create convenience methods to wrap up common logic.\n\nExample signInPage.js\n\n``` js\nvar Page = require('astrolabe').Page;\n\nmodule.exports = Page.create({\n\n    url: { value: 'http://mysite.com/signin' },\n\n    username: { get: function() { return this.findElement(this.by.input('username')); } },\n    password: { get: function() { return this.findElement(this.by.input('password')); } },\n    submit:   { get: function() { return this.findElement(this.by.id('submit')); } },\n    invalid:  { get: function() { return this.findElement(this.by.id('incorrectLogin')); } },\n\n    InvalidLoginException: { get: function() { return this.exception('Invalid Login'); } },\n\n    // Adds a signIn method to the page object.\n    signIn:   { value: function(username, password) {\n\n        var page = this;\n\n        page.go();\n\n        page.username.sendKeys(username);\n        page.password.sendKeys(password);\n\n        page.submit.click();\n\n        return this.invalid.isDisplayed().then(function (wrongLogin) {\n            if (wrongLogin) {\n                page.InvalidLoginException.thro(username + ', ' + password + ' is not valid');\n            }\n        });\n    } }\n});\n```\n\ncan be used in your tests:\n\n``` js\nvar signInPage = require('./path/to/signInPage');\n\n...\n\nsignInPage.signIn('test user', 'testpassword'); // will navigate to sign in page, enter username and password then click submit.\n\n...\n```\n\nCloning and running Astrolabe's tests\n-------------------------------------\nClone the github repository.\n\n    git clone https://github.com/stuplum/astrolabe.git\n    cd astrolabe\n    npm install\n\n    npm test\n\n\nRunning Astrolabe's example protractor test\n-------------------------------------------\n\nInstall protractor with.\n\n    npm install protractor\n\nStart up a selenium server (See the appendix below for help with this). By default, the tests expect the selenium server to be running at `http://localhost:4444/wd/hub`.\n\nThe example folder contains a simple test suite which runs against angularjs.org. It is a port of the simple test suite included with protractor.\n\nCurrently only the protractor runner is supported. The runner accepts a configuration file, which runs the tests at `example/onProtractorRunner.js`.\n\n    node_modules/.bin/protractor examples/protractor.conf.js\n\n\nSetting up a standalone selenium server\n---------------------------------------\n\nSee Appendix A of [protractor's](https://github.com/juliemr/protractor) installation instructions\n",
  "readmeFilename": "Readme.md",
  "_id": "astrolabe@0.3.3-alpha",
  "dist": {
    "shasum": "7cc55b4dbc42b47542eff66161585cff6d966ad5"
  },
  "_from": "astrolabe@",
  "_resolved": "https://registry.npmjs.org/astrolabe/-/astrolabe-0.3.3-alpha.tgz"
}
